import{a as R}from"./GIZWWUBJ.js";const P={KEY:"319e5540-bd60-4f5a-9660-6858c9a01350",PROFILE:"https://api.tracker.network/api/v2/valorant/standard/profile/",MATCHES:"https://api.tracker.network/api/v2/valorant/standard/matches/",INSIGHTS:"https://api.tracker.network/api/v1/valorant/insights/",SEASONS:"https://api.tracker.network/api/v1/valorant/db/seasons",GUIDES:"https://api.tracker.network/api/v1/valorant/guides",BULK:"https://api.tracker.network/api/v1/valorant/overwolf/ow-bulk-lookup",PRIVACY:"https://api.tracker.network/api/v1/valorant/privacy/settings",REALTIME:"https://realtime-events.tracker.network"};class ${static async fetchProfile(t,e="riot",s=!0){var u,h;try{let l=P.PROFILE+e+"/"+encodeURIComponent(t)+(s?"?source=overwolf-2":"?source=web"),i={method:"GET",headers:{"Content-Type":"application/json","TRN-API-Key":P.KEY}},c=await fetch(l,i),r=c.headers.get("content-type");if(!r||!r.includes("application/json")){let m=await c.text();throw new Error(m)}let v=c.headers.get("expires");v&&console.log(`[FetchProfile] URL: ${l}, Expires: ${v}`);let a=await c.json();if(a.errors){for(let m of a.errors){if((u=m.message)!=null&&u.includes("Valorant China"))return{isChina:!0};if(m.code==="CollectorResultStatus::Private"||m.code==="StandardApiV2::Private")return{isPrivate:!0};if(m.code==="CollectorResultStatus::NoData"||m.code==="StandardApiV2::NoData")return null}throw new Error(`Profile is not available (${e}/${t}). Reason: ${JSON.stringify(a.errors)}.`)}if(!a.data)throw new Error(`Profile is not available (${e}/${t}). Reason: ${JSON.stringify(a)}.`);if(a.data.metadata.privacy!=="public"&&a.data.metadata.privacy!=="ranked")return{isPrivate:!0};let o=a.data.metadata.defaultPlaylist,n=a.data.metadata.defaultSeason,d=a.data.segments,p=d.find(m=>m.type==="season"&&m.attributes.playlist==="competitive"),f=d.find(m=>m.type==="peak-rating");return{isPrivate:!1,isPremium:a.data.userInfo.isPremium,playlistId:o,seasonId:n,platformInfo:a.data.platformInfo,user:{id:a.data.platformInfo.platformUserId,platform:a.data.platformInfo.platformSlug,nickname:a.data.platformInfo.platformUserHandle||a.data.platformInfo.platformUserIdentifier||t,avatar:a.data.userInfo.customAvatarUrl||((h=a.data.platformInfo.avatarUrl)==null?void 0:h.replace(/ /g,"%20"))||null,country:a.data.userInfo.countryCode||null,isPremium:a.data.userInfo.isPremium||!1,premiumDuration:a.data.userInfo.premiumDuration??null,premiumFrameInfo:a.data.userInfo.customAvatarFrameInfo||null},progress:this._getProgress(p,f),playlists:{[n]:this._getPlaylists(d)},agents:{[n]:this._getAgents(d)},maps:{[n]:this._getMaps(d)},weapons:{[n]:this._getWeapons(d)}}}catch(l){return console.error(l.message),R.notify(l),null}}static async fetchPlaylist(t,e,s,u=!1,h="riot",l=!0){var i;try{let c=P.PROFILE+h+"/"+encodeURIComponent(s);e==="all"?c+="/segments/playlist?playlist="+t:e==="last-30-days"?c+="/segments/last-30-days?playlist="+t:c+="/segments/season?playlist="+t+"&seasonId="+e,c+=l?"&source=overwolf-2":"&source=web",u&&(c+=`&v=${Date.now()}`);let r={method:"GET",headers:{"Content-Type":"application/json","TRN-API-Key":P.KEY}},v=await fetch(c,r),a=v.headers.get("content-type");if(!a||!a.includes("application/json")){let f=await v.text();throw new Error(f)}let o=v.headers.get("expires");o&&console.log(`[FetchPlaylist] URL: ${c}, Expires: ${o}`);let n=await v.json();if(n.errors){for(let f of n.errors){if((i=f.message)!=null&&i.includes("Valorant China"))return null;if(f.code==="CollectorResultStatus::Private"||f.code==="StandardApiV2::Private")return{isPrivate:!0};if(f.code==="CollectorResultStatus::NoData"||f.code==="StandardApiV2::NoData")return null}throw new Error(`Playlist/Season is not available (${h}/${s}/${t}/${e}). Reason: ${JSON.stringify(n.errors)}.`)}if(!n.data)throw new Error(`Playlist/Season is not available (${h}/${s}/${t}/${e}). Reason: ${JSON.stringify(n)}.`);let d=n.data,p=d.find(f=>(f.type==="season"||f.type==="playlist")&&f.attributes.playlist==="competitive");return{isPrivate:!1,isPremium:null,playlistId:t,seasonId:e,progress:this._getProgress(p),playlists:{[e]:this._getPlaylists(d)},agents:{[e]:this._getAgents(d)},maps:{[e]:this._getMaps(d)},weapons:{[e]:this._getWeapons(d)}}}catch(c){return console.error(c.message),R.notify(c),null}}static async fetchSeasonReport(t,e,s="riot",u=!0){var h;try{let l=P.PROFILE+s+"/"+encodeURIComponent(e)+"/segments/season-report?playlist="+t+(u?"&source=overwolf-2":"&source=web"),i={method:"GET",headers:{"Content-Type":"application/json","TRN-API-Key":P.KEY}},c=await fetch(l,i),r=c.headers.get("content-type");if(!r||!r.includes("application/json")){let a=await c.text();throw new Error(a)}let v=await c.json();if(v.errors){for(let a of v.errors){if((h=a.message)!=null&&h.includes("Valorant China"))return null;if(a.code==="CollectorResultStatus::Private"||a.code==="StandardApiV2::Private")return{isPrivate:!0};if(a.code==="CollectorResultStatus::NoData"||a.code==="StandardApiV2::NoData")return null}throw new Error(`Seasonal stats are not available (${s}/${e}/${t}). Reason: ${JSON.stringify(v.errors)}.`)}if(!v.data)throw new Error(`Seasonal stats are not available (${s}/${e}/${t}). Reason: ${JSON.stringify(v)}.`);return{[t]:v.data.filter(a=>a.type==="season-report").map(a=>{let o=a.metadata.name.split(": "),n=parseInt(o[0].replace(/[^0-9-]/g,"")),d=parseInt(o[1].replace(/[^0-9-]/g,""));return{playlistId:a.attributes.playlist,episodeIndex:a.attributes.episode,actIndex:a.attributes.act,progress:this._getProgress(a),metadata:{name:a.metadata.name.replace(" ",""),order:3*(n-1)+d},stats:{kd:a.stats.kDRatio.value,kills:a.stats.kills.value,killsPerRound:a.stats.killsPerRound.value,killsPerMatch:a.stats.killsPerMatch.value,deaths:a.stats.deaths.value,deathsPerRound:a.stats.deathsPerRound.value,deathsPerMatch:a.stats.deathsPerMatch.value,headshotPct:a.stats.headshotsPercentage.value,roundsWon:0,roundsLost:0,roundsPlayed:a.stats.roundsPlayed.value,roundWinPct:0,matchesWon:a.stats.matchesWon.value,matchesLost:a.stats.matchesLost.value,matchesTied:a.stats.matchesTied.value,matchesPlayed:a.stats.matchesPlayed.value,matchWinPct:a.stats.matchesWinPct.value,timePlayed:a.stats.timePlayed.value}}}).sort((a,o)=>o.metadata.order-a.metadata.order)}}catch(l){return console.error(l.message),R.notify(l),null}}static async fetchRecentMatches(t,e,s=!1,u="riot",h=!0){var l;try{let i=P.MATCHES+u+"/"+encodeURIComponent(e)+"?type="+t+(h?"&source=overwolf-2":"&source=web");s&&(i+=`v=${Date.now()}`);let c={method:"GET",headers:{"Content-Type":"application/json","TRN-API-Key":P.KEY}},r=await fetch(i,c),v=r.headers.get("content-type");if(!v||!v.includes("application/json")){let o=await r.text();throw new Error(o)}let a=await r.json();if(a.errors){for(let o of a.errors){if((l=o.message)!=null&&l.includes("Valorant China"))return null;if(o.code==="CollectorResultStatus::Private"||o.code==="StandardApiV2::Private")return{isPrivate:!0};if(o.code==="CollectorResultStatus::NoData"||o.code==="StandardApiV2::NoData")return null}throw new Error(`Recent matches are not available (${u}/${e}/${t}). Reason: ${JSON.stringify(a.errors)}.`)}if(!a.data)throw new Error(`Recent matches are not available (${u}/${e}/${t}). Reason: ${JSON.stringify(a)}.`);return a.data.matches.filter(o=>o.segments.length>0).map(o=>{let n=o.segments.find(d=>d.type==="overview");return{id:o.attributes.id,seasonId:o.attributes.seasonId,playlistId:t,mapId:(o.metadata.mapName||"unknown").replace(/ /,"").toLowerCase(),agentId:this._getAgentId(n.metadata.agentName),rankId:n.stats.rank?this._getRankId(n.stats.rank.metadata.iconUrl):null,result:n.stats.roundsWon.value===n.stats.roundsLost.value?"draw":o.metadata.result,placement:n.stats.placement.value,start:Number(new Date(o.metadata.timestamp)),end:Number(new Date(o.metadata.timestamp))+1e3*n.stats.playtime.value,score:t!=="deathmatch"&&t!=="team-deathmatch"&&t!=="escalation"&&t!=="snowball"?{wins:n.stats.roundsWon.value,losses:n.stats.roundsLost.value}:null,trackerScore:n.stats.trnPerformanceScore?{value:n.stats.trnPerformanceScore.value,stats:n.stats.trnPerformanceScore.metadata.stats.map(d=>n.stats[d]).filter(d=>!!d)}:null,stats:{kd:n.stats.kdRatio.value,kills:n.stats.kills.value,killsPerRound:n.stats.kills.value/n.stats.roundsPlayed.value||0,deaths:n.stats.deaths.value,deathsPerRound:n.stats.deaths.value/n.stats.roundsPlayed.value||0,assists:n.stats.assists.value,assistsPerRound:n.stats.assists.value/n.stats.roundsPlayed.value||0,headshots:n.stats.headshots.value,headshotsPerRound:n.stats.headshots.value/n.stats.roundsPlayed.value||0,headshotPct:n.stats.headshotsPercentage.value,damage:n.stats.damage.value,damagePerRound:n.stats.damagePerRound.value,score:n.stats.score.value,scorePerRound:n.stats.scorePerRound.value,roundsWon:n.stats.roundsWon.value,roundsLost:n.stats.roundsLost.value,roundsPlayed:n.stats.roundsPlayed.value,economyRating:n.stats.econRating.value,timePlayed:n.stats.playtime.value},accuracy:{headHits:n.stats.dealtHeadshots.value,bodyHits:n.stats.dealtBodyshots.value,legsHits:n.stats.dealtLegshots.value}}})}catch(i){return console.error(i.message),R.notify(i),null}}static async fetchMatchDetails(t){try{let e=P.MATCHES+t,s={method:"GET",headers:{"Content-Type":"application/json","TRN-API-Key":P.KEY}},u=await fetch(e,s),h=u.headers.get("content-type");if(!h||!h.includes("application/json")){let a=await u.text();throw new Error(a)}let l=await u.json();if(l.errors)throw new Error(`The requested match is not available (${t}). Reason: ${JSON.stringify(l.errors)}.`);if(!l.data)throw new Error(`The requested match is not available (${t}). Reason: ${JSON.stringify(l)}.`);let i=l.data.metadata.modeName.replace(/ /,"").replace(/Normal/,"Unrated").toLowerCase(),c=l.data.segments.filter(a=>a.type==="player-round").some(a=>{var o,n;return(n=(o=a.stats)==null?void 0:o.remainingCredits)==null?void 0:n.value}),r=l.data.segments.filter(a=>a.type==="player-summary"),v=this._getParties(r);return{id:l.data.attributes.id,duration:l.data.metadata.duration,playlistId:i,mapId:(l.data.metadata.mapName||"unknown").replace(/ /,"").toLowerCase(),start:Number(new Date(l.data.metadata.dateStarted)),end:Number(new Date(l.data.metadata.dateStarted))+1e3*l.data.metadata.duration,isTeamBased:!["deathmatch"].includes(i),isRoundBased:l.data.metadata.modeMaxRounds>1&&l.data.metadata.rounds>1,isEconomyBased:c,modeMaxRounds:l.data.metadata.modeMaxRounds,teams:l.data.segments.filter(a=>a.type==="team-summary").map(a=>({id:a.attributes.teamId.toLowerCase(),stats:{roundsWon:a.stats.roundsWon.value}})),players:r.map(a=>({agentId:this._getAgentId(a.metadata.agentName),teamId:i==="deathmatch"?a.attributes.platformUserIdentifier===localStorage.nickname?"red":"blue":a.metadata.teamId.toLowerCase(),levelId:a.metadata.accountLevel||null,rankId:a.stats.rank?this._getRankId(a.stats.rank.metadata.iconUrl):null,partyId:v[a.metadata.partyId]||null,user:{platform:a.attributes.platformSlug,nickname:a.attributes.platformUserIdentifier},stats:{kills:a.stats.kills.value,killsPerRound:a.stats.killsPerRound.value,deaths:a.stats.deaths.value,assists:a.stats.assists.value,kdRatio:a.stats.kdRatio.value,headshots:a.stats.headshots?a.stats.headshots.value:0,hsAccuracy:a.stats.hsAccuracy.value,damage:a.stats.damage.value,damageDeltaPerRound:a.stats.damageDeltaPerRound.value,damagePerRound:a.stats.damagePerRound.value,esr:a.stats.esr.value,kast:a.stats.kast.value,clutches:a.stats.clutches.value,econRating:a.stats.econRating.value,trnPerformanceScore:a.stats.trnPerformanceScore?a.stats.trnPerformanceScore.value:null,firstKills:a.stats.firstKills.value,firstDeaths:a.stats.firstDeaths.value,pentaKills:a.stats.pentaKills.value,score:a.stats.score.value,scorePerRound:a.stats.scorePerRound.value},rounds:l.data.segments.filter(o=>o.type==="player-round"&&o.attributes.platformUserIdentifier===a.attributes.platformUserIdentifier).map(o=>({id:o.attributes.round,overtime:o.attributes.round>=l.data.metadata.modeMaxRounds,result:o.metadata.hasWon?"victory":"defeat",teamId:o.metadata.teamId,teamSide:o.metadata.teamSide,stats:{kills:o.stats.kills.value,deaths:o.stats.deaths.value,assists:o.stats.assists.value,headshots:o.stats.headshots?o.stats.headshots.value:0,remainingCredits:o.stats.remainingCredits.value,loadoutValue:o.stats.loadoutValue.value}})),kills:l.data.segments.filter(o=>o.type==="player-round-kills"&&o.attributes.platformUserIdentifier===a.attributes.platformUserIdentifier&&(o.metadata.finishingDamage.damageType==="Weapon"||o.metadata.finishingDamage.damageType==="Melee"||o.metadata.finishingDamage.damageType==="Ability")).map(o=>{let n=o.metadata.finishingDamage.damageType.toLowerCase(),d=o.metadata.weaponName?o.metadata.weaponName:i==="snowballfight"?"snowball-launcher":"melee";return{type:n,time:o.metadata.gameTime,round:o.attributes.round,weapon:n==="weapon"||n==="melee"?{id:n==="weapon"?d.toLowerCase():"melee"}:null,ability:n==="ability"?{id:o.metadata.finishingDamage.damageItem}:null,stats:{damage:o.stats.damage.value},victim:{platform:o.metadata.opponentPlatformInfo.platformSlug,nickname:o.metadata.opponentPlatformInfo.platformUserIdentifier}}})})).sort((a,o)=>o.stats.kills-a.stats.kills||a.stats.deaths-o.stats.deaths||o.stats.assists-a.stats.assists),rounds:l.data.segments.filter(a=>a.type==="round-summary").map(a=>{let o=l.data.segments.filter(d=>d.type==="player-round-damage"&&d.attributes.round===a.attributes.round),n=l.data.segments.filter(d=>d.type==="player-round-kills"&&d.attributes.round===a.attributes.round);return{id:a.attributes.round,stats:{roundResult:a.stats.roundResult.value,winningTeam:a.stats.winningTeam.value},damageSummary:o&&o.length?o.map(d=>({player:d.metadata.platformInfo.platformUserIdentifier,opponent:d.metadata.opponentPlatformInfo.platformUserIdentifier,stats:{damage:d.stats.damage.value}})):[],duelsSummary:n&&n.length?Object.entries(n.reduce((d,p)=>{var b,y,S,T,D;let f=p.metadata.platformInfo.platformUserIdentifier,m=p.metadata.opponentPlatformInfo.platformUserIdentifier,k=`${f}:::${m}`,w=(b=p.metadata.playerLocations.find(E=>E.platformUserIdentifier===f))==null?void 0:b.location,g=p.metadata.opponentLocation,N=w&&g?Math.sqrt(Math.pow(w.x-g.x,2)+Math.pow(w.y-g.y,2))*.01:null,I=p.metadata.finishingDamage.damageType.toLowerCase(),M=p.metadata.weaponName?p.metadata.weaponName:i==="snowballfight"?"snowball-launcher":"melee";return{...d,[k]:{player:f,opponent:m,gameTime:p.metadata.gameTime,roundTime:p.metadata.roundTime,weapon:I==="weapon"||I==="melee"?{id:I==="weapon"?M.toLowerCase():"melee"}:null,stats:{killedOpponent:(((S=(y=d==null?void 0:d[k])==null?void 0:y.stats)==null?void 0:S.killedOpponent)||0)+1,opponentDeaths:(((D=(T=d==null?void 0:d[k])==null?void 0:T.stats)==null?void 0:D.opponentDeaths)||0)+1,killDistanceInMeters:N}}}},{})).map(([d,p])=>p):[]}})}}catch(e){return console.error(e.message),R.notify(e),null}}static async fetchPremierTeamInfo(t,e){var s,u;try{const h=`https://api.tracker.network/api/v1/valorant/premier/roster/${encodeURIComponent(t)}/detailed?region=${e}`,l={method:"GET",headers:{"Content-Type":"application/json","TRN-API-Key":P.KEY}},i=await fetch(h,l),c=i.headers.get("content-type");if(!(c!=null&&c.includes("application/json"))){const v=await i.text();throw new Error(v)}const r=await i.json();if(r.errors){for(const v of r.errors)if((s=v.message)!=null&&s.includes("Valorant China"))return null;throw new Error(`The Premier team information is not available. Team: "${t}", region: "${e}". Reason: ${JSON.stringify(r.errors)}.`)}return{id:r.data.id,name:r.data.name,logoUrl:(u=r.data.icon)==null?void 0:u.imageUrl,stats:this._getSegmentStats(r.data.teamStats[0],{division:r.data.division||0,rank:r.data.rank,leagueScore:r.data.leagueScore||0}),players:r.data.players.map(v=>{var o,n,d,p,f,m,k,w,g,N,I,M,b;const a=(o=r.data.playerStats.find(y=>y.attributes.id===v.platformUserId))==null?void 0:o.stats;return{id:v.platformUserId,nickname:v.platformUserHandle,avatarUrl:v.avatarUrl,country:v.additionalParameters.countryCode,isOwner:v.additionalParameters.isOwner||!1,rankId:((n=a==null?void 0:a.rating)==null?void 0:n.value)??0,peakRankId:((d=a==null?void 0:a.peakRating)==null?void 0:d.value)??0,stats:{damageDeltaPerRound:((p=a==null?void 0:a.damageDeltaPerRound)==null?void 0:p.value)??0,scorePerRound:((f=a==null?void 0:a.scorePerRound)==null?void 0:f.value)??0,roundWinPct:((m=a==null?void 0:a.roundsWinPct)==null?void 0:m.value)??0,matchesWon:((k=a==null?void 0:a.matchesWon)==null?void 0:k.value)??0,matchesLost:((w=a==null?void 0:a.matchesLost)==null?void 0:w.value)??0,matchesPlayed:((g=a==null?void 0:a.matchesPlayed)==null?void 0:g.value)??0,headshotPct:((N=a==null?void 0:a.headshotsPercentage)==null?void 0:N.value)??0,esr:100*(((I=a==null?void 0:a.esr)==null?void 0:I.value)??0),kast:((M=a==null?void 0:a.kAST)==null?void 0:M.value)??0,trackerScore:((b=a==null?void 0:a.trnPerformanceScore)==null?void 0:b.value)||0},matchHistory:r.data.recentMatches.map(y=>{var T,D;const S=y.segments.find(E=>E.attributes.platformUserIdentifier===v.platformUserIdentifier);return{id:y.attributes.id,mapId:y.metadata.mapName.toLowerCase(),agentId:((D=(T=S==null?void 0:S.metadata)==null?void 0:T.agentName)==null?void 0:D.toLowerCase())??null}})}}).sort((v,a)=>a.stats.matchesPlayed-v.stats.matchesPlayed)}}catch(h){return console.error(h.message),R.notify(h),null}}static async fetchInsights(t="agents"){var e;try{let s=P.INSIGHTS+t+"?histogram=false",u={method:"GET",headers:{"Content-Type":"application/json","TRN-API-Key":P.KEY,"User-Agent":"OverwolfClient"}},h=await fetch(s,u),l=h.headers.get("content-type");if(!l||!l.includes("application/json")){let c=await h.text();throw new Error(c)}let i=await h.json();if(i.errors){for(let c of i.errors)if((e=c.message)!=null&&e.includes("Valorant China"))return null;throw new Error(`Insights are not available (${t}). Reason: ${JSON.stringify(i.errors)}.`)}if(!i.data||!i.data.insights||i.data.insights.length===0)throw new Error(`Insights are not available (${t}). Reason: ${JSON.stringify(i)}.`);return i.data.insights}catch(s){return console.error(s.message),R.notify(s),null}}static async fetchSeasons(){var t;try{let e=P.SEASONS,s={method:"GET",headers:{"Content-Type":"application/json","TRN-API-Key":P.KEY}},u=await fetch(e,s);if(u.status===403)return{isChina:!0};let h=u.headers.get("content-type");if(!h||!h.includes("application/json")){let i=await u.text();throw new Error(i)}let l=await u.json();if(l.errors){for(let i of l.errors)if((t=i.message)!=null&&t.includes("Valorant China"))return{isChina:!0};throw new Error(`Seasons are not available. Reason: ${JSON.stringify(l.errors)}.`)}return l.data.reduce((i,c)=>{for(let r of c.seasons)i.push({id:r.id,name:c.name+": "+r.name,shortName:c.shortName+": "+r.shortName});return i},[]).reverse()}catch(e){return console.error(e.message),R.notify(e),null}}static async fetchGuides(t="all",e="all"){var s;try{let u=P.GUIDES+"?"+new URLSearchParams({agent:t,map:e}).toString(),h={method:"GET",headers:{"Content-Type":"application/json","TRN-API-Key":P.KEY,"User-Agent":"OverwolfClient"}},l=await fetch(u,h),i=l.headers.get("content-type");if(!i||!i.includes("application/json")){let r=await l.text();throw new Error(r)}let c=await l.json();if(c.errors){for(let r of c.errors)if((s=r.message)!=null&&s.includes("Valorant China"))return null;throw new Error(`Guides are not available. Reason: ${JSON.stringify(c.errors)}.`)}if(!c.data)throw new Error(`Guides are not available. Reason: ${JSON.stringify(c)}.`);return c.data.guides.filter(r=>r.score>=0).map(r=>({id:r.id,url:r.videoUrl,preview:r.previewImageUrl,rating:r.score,views:r.views,metadata:{author:r.creator.userName,title:r.title,description:r.description,timestamp:r.dateCreated},attributes:{agent:r.attributes.agent,ability:r.attributes.ability,map:r.attributes.map,team:r.attributes.side,location:r.attributes.location}}))}catch(u){return console.error(u.message),R.notify(u),null}}static async fetchMultipleProfiles(t,e,s){var l;const u=P.BULK,h={method:"POST",headers:{"Content-Type":"application/json","TRN-API-Key":P.KEY,"User-Agent":"OverwolfClient"},body:JSON.stringify({phaseId:t.phaseId,matchId:e.id,playlistId:e.playlistId||"competitive",mapId:e.mapId,players:s})};try{const i=await fetch(u,h),c=i.headers.get("content-type");if(!c||!c.includes("application/json")){const d=await i.text();throw new Error(d)}const r=await i.json();if(r.errors){for(const d of r.errors)if((l=d.message)!=null&&l.includes("Valorant China"))return null;throw new Error(JSON.stringify(r.errors))}if(!r.data)throw new Error(JSON.stringify(r));const v=r.data.playersInfo||r.data.players;if(!v||v.length===0)throw new Error(JSON.stringify(r));const a=r.data.gameInfo.episodeIndex,o=r.data.gameInfo.actIndex,n=v.map(d=>{var p;return{id:d.playerId??((p=s.find(f=>f.playerName===d.playerName))==null?void 0:p.playerId)??null,nickname:d.playerName,levelId:d.levelId||d.level||0,rankId:d.currentRank?d.currentRank.id:0,peakRankId:d.peakRank?this._getRankId(d.peakRank.imageUrl):0,peakRankInSeasonName:d.peakRank?d.peakRank.seasonShortName:null,isProfileFound:d.isFound,isProfilePrivate:d.isPrivate,career:{playlistStats:this._getBulkStats(d.playlistStats),agentStats:this._getBulkStats(d.agentStats),matchHistory:d.matchHistory||[]}}});return{episodeIndex:a,actIndex:o,profiles:n}}catch(i){return console.error(`The bulk endpoint is not available. Reason: ${JSON.stringify(i.message)}. Request: ${h.body}.`),R.notify(i),null}}static async setPrivacy(t,e=!1){try{const s=P.PRIVACY,u={method:"PUT",headers:{Authorization:"Verification "+t,"Content-Type":"application/json"},body:JSON.stringify({isPrivate:e})};return(await fetch(s,u)).ok}catch(s){return console.error(s),R.notify(s),null}}static _getRankId(t){if(t){let e=parseInt(t.replace("tiersv2","").match(/\d+/))||0;return e<=2?0:e}else return 0}static _getAgentId(t){return t?t.toLowerCase().replace("/",""):"unknown"}static _getProgress(t,e){var l,i,c;if(!t&&!e)return null;const s=t&&t.stats.rank?{id:this._getRankId(t.stats.rank.metadata.iconUrl),value:t.stats.rank.value}:null,u=((l=e==null?void 0:e.stats)==null?void 0:l.peakRating)||((i=e==null?void 0:e.stats)==null?void 0:i.peakRank)||((c=t==null?void 0:t.stats)==null?void 0:c.peakRank),h=u?{id:this._getRankId(u.metadata.iconUrl),value:u.value}:null;return{competitiveRank:s,competitivePeakRank:h}}static _getSegmentStats(t,e=null){return{kd:t.stats.kDRatio.value,kills:t.stats.kills.value,killsPerRound:t.stats.killsPerRound.value,killsPerMatch:t.stats.killsPerMatch.value,deaths:t.stats.deaths.value,deathsPerRound:t.stats.deathsPerRound.value,deathsPerMatch:t.stats.deathsPerMatch.value,assists:t.stats.assists.value,assistsPerRound:t.stats.assistsPerRound.value,assistsPerMatch:t.stats.assistsPerMatch.value,headshots:t.stats.headshots.value,headshotsPerRound:t.stats.headshotsPerRound.value,headshotsPerMatch:t.stats.headshots.value/t.stats.matchesPlayed.value||0,headshotPct:t.stats.headshotsPercentage.value,firstKills:t.stats.firstBloods.value,firstKillsPerRound:t.stats.firstBloodsPerRound.value,firstKillsPerMatch:t.stats.firstBloods.value/t.stats.matchesPlayed.value||0,firstDeaths:t.stats.firstDeaths.value,firstDeathsPerRound:t.stats.firstDeathsPerRound.value,firstDeathsPerMatch:t.stats.firstDeaths.value/t.stats.matchesPlayed.value||0,damage:t.stats.damage.value,damagePerRound:t.stats.damagePerRound.value,damagePerMatch:t.stats.damagePerMatch.value,damageDelta:t.stats.damageDelta.value,damageDeltaPerRound:t.stats.damageDeltaPerRound.value,score:t.stats.score.value,scorePerRound:t.stats.scorePerRound.value,scorePerMatch:t.stats.scorePerMatch.value,economyRating:t.stats.econRating.value,economyRatingPerRound:t.stats.econRatingPerRound.value,economyRatingPerMatch:t.stats.econRatingPerMatch.value,plants:t.stats.plants.value,plantsPerRound:t.stats.plantsPerRound.value,plantsPerMatch:t.stats.plantsPerMatch.value,defuses:t.stats.defuses.value,defusesPerRound:t.stats.defusesPerRound.value,defusesPerMatch:t.stats.defusesPerMatch.value,roundsWon:t.stats.roundsWon.value,roundsLost:t.stats.roundsLost.value,roundsPlayed:t.stats.roundsPlayed.value,roundWinPct:t.stats.roundsWinPct.value,matchesWon:t.stats.matchesWon.value,matchesLost:t.stats.matchesLost.value,matchesTied:t.stats.matchesTied.value,matchesPlayed:t.stats.matchesPlayed.value,matchWinPct:t.stats.matchesWinPct.value,aces:t.stats.aces.value,clutches:t.stats.clutches.value,clutchPct:t.stats.clutchesPercentage.value,flawless:t.stats.flawless.value,kast:t.stats.kAST.value,mostKillsInMatch:t.stats.mostKillsInMatch.value,timePlayed:t.stats.timePlayed.value,attack:{kd:t.stats.attackKDRatio.value,kills:t.stats.attackKills.value,killsPerRound:t.stats.attackKillsPerRound.value,deaths:t.stats.attackDeaths.value,deathsPerRound:t.stats.attackDeaths.value/(t.stats.attackRoundsWon.value+t.stats.attackRoundsLost.value)||0,assists:t.stats.attackAssists.value,assistsPerRound:t.stats.attackAssistsPerRound.value,headshots:t.stats.attackHeadshots.value,headshotsPerRound:t.stats.attackHeadshots.value/(t.stats.attackRoundsWon.value+t.stats.attackRoundsLost.value)||0,firstKills:t.stats.attackFirstBloods.value,firstKillsPerRound:t.stats.attackFirstBloodsPerRound.value,firstDeaths:t.stats.attackFirstDeaths.value,firstDeathsPerRound:t.stats.attackFirstDeathsPerRound.value,damage:t.stats.attackDamage.value,damagePerRound:t.stats.attackDamagePerRound.value,score:t.stats.attackScore.value,scorePerRound:t.stats.attackScorePerRound.value,roundsWon:t.stats.attackRoundsWon.value,roundsLost:t.stats.attackRoundsLost.value,roundsPlayed:t.stats.attackRoundsWon.value+t.stats.attackRoundsLost.value,roundWinPct:t.stats.attackRoundsWinPct.value,kast:t.stats.attackKAST.value},defense:{kd:t.stats.defenseKDRatio.value,kills:t.stats.defenseKills.value,killsPerRound:t.stats.defenseKillsPerRound.value,deaths:t.stats.defenseDeaths.value,deathsPerRound:t.stats.defenseDeaths.value/(t.stats.defenseRoundsWon.value+t.stats.defenseRoundsLost.value)||0,assists:t.stats.defenseAssists.value,assistsPerRound:t.stats.defenseAssistsPerRound.value,headshots:t.stats.defenseHeadshots.value,headshotsPerRound:t.stats.defenseHeadshots.value/(t.stats.defenseRoundsWon.value+t.stats.defenseRoundsLost.value)||0,damage:t.stats.defenseDamage.value,damagePerRound:t.stats.defenseDamagePerRound.value,firstKills:t.stats.defenseFirstBloods.value,firstKillsPerRound:t.stats.defenseFirstBloodsPerRound.value,firstDeaths:t.stats.defenseFirstDeaths.value,firstDeathsPerRound:t.stats.defenseFirstDeathsPerRound.value,score:t.stats.defenseScore.value,scorePerRound:t.stats.defenseScorePerRound.value,roundsWon:t.stats.defenseRoundsWon.value,roundsLost:t.stats.defenseRoundsLost.value,roundsPlayed:t.stats.defenseRoundsWon.value+t.stats.defenseRoundsLost.value,roundWinPct:t.stats.defenseRoundsWinPct.value,kast:t.stats.defenseKAST.value},...e}}static _getPlaylists(t){return t.filter(e=>e.type==="season"||e.type==="playlist").reduce((e,s)=>{let u=s.attributes.playlist,h=s.stats.trnPerformanceScore?{value:s.stats.trnPerformanceScore.value,stats:s.stats.trnPerformanceScore.metadata.stats.map(l=>s.stats[l]).filter(l=>!!l)}:null;return e[u]=this._getSegmentStats(s,{trackerScore:h}),e},{})}static _getAgents(t){return t.filter(e=>e.type==="agent").reduce((e,s)=>{let u=s.attributes.playlist,h=this._getAgentId(s.metadata.name);e[u]||(e[u]={});let l=t.filter(i=>i.type==="map-agent"&&i.attributes.agentKey===h);return e[u][h]=this._getSegmentStats(s,{maps:l.reduce((i,c)=>{let r=c.attributes.mapKey;return i[r]=this._getSegmentStats(c),i},{})}),e},{})}static _getMaps(t){return t.filter(e=>e.type==="map").reduce((e,s)=>{let u=s.attributes.playlist,h=s.attributes.key;e[u]||(e[u]={});let l=t.filter(r=>r.type==="map-top-agent"&&r.attributes.mapKey===h).sort((r,v)=>v.stats.matchesWinPct.value-r.stats.matchesWinPct.value),i=l.length>0?l[0].attributes.agentKey:null,c=t.filter(r=>r.type==="map-agent"&&r.attributes.mapKey===h);return e[u][h]=this._getSegmentStats(s,{topAgentId:i,agents:c.reduce((r,v)=>{let a=v.attributes.agentKey;return r[a]=this._getSegmentStats(v),r},{})}),e},{})}static _getWeapons(t){return t.filter(e=>e.type==="weapon").reduce((e,s)=>{let u=s.attributes.playlist,h=s.attributes.key;return e[u]||(e[u]={}),e[u][h]={kd:s.stats.kDRatio.value,kills:s.stats.kills.value,killsPerRound:s.stats.killsPerRound.value,killsPerMatch:s.stats.killsPerMatch.value,secondaryKills:s.stats.secondaryKills.value,secondaryKillsPerRound:s.stats.secondaryKillsPerRound.value,secondaryKillsPerMatch:s.stats.secondaryKillsPerMatch.value,deaths:s.stats.deaths.value,deathsPerRound:s.stats.deathsPerRound.value,deathsPerMatch:s.stats.deathsPerMatch.value,headshots:s.stats.headshots.value,headshotsPerRound:0,headshotsPerMatch:0,headshotPct:s.stats.headshotsPercentage.value,damage:s.stats.damage.value,damagePerRound:s.stats.damagePerRound.value,damagePerMatch:s.stats.damagePerMatch.value},e},{})}static _getInsights(t){return{agents:t.filter(e=>e.type==="insights-agent").reduce((e,s)=>{let u=s.attributes.key,h=t.filter(l=>l.type==="insights-agent-map"&&l.attributes.agentKey===u);return e[u]={kd:s.stats.kdRatio.value,killPct:s.stats.kills.value,killsPerMatch:s.stats.killsPerMatch.value,deathPct:s.stats.deaths.value,deathsPerMatch:s.stats.deathsPerMatch.value,assistPct:s.stats.assists.value,assistsPerMatch:s.stats.assistsPerMatch.value,pickRate:s.stats.pickRate.value,matchWinPct:s.stats.wlPercentage.value,damageDeltaPerRound:s.stats.damageDeltaPerRound.value,maps:h.reduce((l,i)=>{let c=i.attributes.mapKey;return l[c]={kd:i.stats.kdRatio.value,pickRate:i.stats.pickRate.value,matchWinPct:i.stats.wlPercentage.value,damageDeltaPerRound:i.stats.damageDeltaPerRound.value},l},{})},e},{}),maps:{}}}static _getParties(t){return Object.entries(t.reduce((e,s)=>{let u=s.metadata.partyId;return u?{...e,[u]:((e==null?void 0:e[u])||0)+1}:e},{})).reduce((e,[s,u])=>u<=1?e:{...e,[s]:(Object.keys(e).length||0)+1},{})}static _getBulkStats(t){return t?{kd:t.kd,kad:t.kad,kda:t.kda,kills:t.kills,killsPerRound:t.killsPerRound,killsPerMatch:t.killsPerMatch,deaths:t.deaths,esr:t.esr,kast:t.kast,matchWinPct:t.matchWinPct,damagePerRound:t.damagePerRound,damagePerMatch:t.damagePerMatch,damageDeltaPerRound:t.damageDeltaPerRound,damageDeltaPerMatch:t.damageDeltaPerMatch,scorePerRound:t.scorePerRound,scorePerMatch:t.scorePerMatch,headshotPct:t.headshotPct,mvps:t.mvps,matchesPlayed:t.matchesPlayed,timePlayed:t.timePlayed,trackerScore:t.trnPerformanceScore||0}:null}}export{$ as T,P as a};
